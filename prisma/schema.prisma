generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
  binaryTargets   = ["linux-musl-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "windows", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                      @id @default(uuid())
  name                      String
  document                  String                      @unique
  email                     String                      @unique
  role                      Role                        @default(MASTER)
  status                    String
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  access_token              String?
  refId                     String?
  type                      Type                        @default(ADM)
  password                  String?
  api_key                   String?
  AuthToken                 AuthToken[]
  Pictures                  Pictures[]

  @@map("users")
}


model GraphicAccount {
  id                         String                      @id @default(uuid())
  name                       String?
  userName                   String?                      @unique
  hardPassword               String?   
  password_hash              String?
  status                     String?
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime                    @updatedAt
  access_token               String?
  blocked                    Boolean                     @default(false)
  counter                    Int                         @default(0)
  role                       Role                        @default(USER)
  AuthToken                  AuthToken[]
  Notifications              Notifications[]
  Pictures                   Pictures[]

  @@map("graphic_accounts")
}



model AccountToken {
  access_token String
  account_id   String  @unique
  id           String? @default(uuid())

  @@map("accounts_token")
}

model Upbrand {
  id         String   @id @default(uuid())
  data       Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("upbrand")
}



model Plans {
  id               String         @id @default(uuid())
  name             String         @unique
  description      String?
  price            Float
  subscribersIds   String[]
  avaliableToRoles String[]
  active           Boolean        @default(true)
  SubscriptionPlan Subscription[]

  @@map("plans")
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String             @unique
  planId     String
  status     SubscriptionStatus @default(ACTIVE)
  recurrence Int                @default(30)
  created_at DateTime           @default(now())
  updated_at DateTime           @default(now())
  Invoice    Invoice[]
  plan       Plans              @relation(fields: [planId], references: [id])
}

model Invoice {
  id             String        @id @default(uuid())
  description    String?
  subscriptionId String
  price          Float
  status         InvoiceStatus @default(OPEN)
  closeIn        DateTime
  dueIn          DateTime
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
}





model PixFavorites {
  id          String   @id @default(uuid())
  userId      String
  contactName String
  keyPix      String
  keyType     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("pix_favorites")
}

model Operatos {
  id            String          @id @default(uuid())
  name          String
  userName      String?         @unique
  password      String? 
  hardPassword      String?         
  role          Role            @default(USER)
  status        String          
  access_token  String?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  type          Type            @default(OPERATOR)

  @@map("operators")
}

model Pictures {
  id                 String          @id @default(uuid())
  url                String?
  user_id            String?
  graphic_account_id String?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  GraphicAccount     GraphicAccount? @relation(fields: [graphic_account_id], references: [id])
  User               User?           @relation(fields: [user_id], references: [id])

  @@map("pictures")
}

model Notifications {
  id               String          @id @default(uuid())
  accountId        String?
  graphicAccountId String?
  schema           String?
  idSchema         String?
  path             String?
  title            String?
  message          String?
  icon             String?
  isRead           Boolean         @default(false)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  deleted_at       DateTime?
  GraphicAccount   GraphicAccount? @relation(fields: [graphicAccountId], references: [id])

  @@map("notifications")
}

model AuthToken {
  id                 String          @id @default(uuid())
  token              String
  user_id            String?
  graphic_account_id String?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  GraphicAccount     GraphicAccount? @relation(fields: [graphic_account_id], references: [id])
  User               User?           @relation(fields: [user_id], references: [id])

  @@map("authToken")
}

model VerifyAuth {
  id         String   @id @default(uuid())
  data       Json
  status     String   @default("pending")
  rg_cnh     String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("verifyAuth")
}

model Ticket {
  id          String       @id @default(uuid())
  number      Int          @unique @default(autoincrement())
  title       String
  description String
  status      TicketStatus @default(WAITING)
  origem      String
  type        String
  category    String
  applicant   String
  assigned    String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  attachments Attachment[]
  messages    Message[]

  @@map("tickets")
}

model Message {
  id         String   @id @default(uuid())
  ticketId   String
  author     String
  content    String
  read       Boolean  @default(false)
  created_at DateTime @default(now())
  ticket     Ticket   @relation(fields: [ticketId], references: [id])

  @@map("messages")
}

model Attachment {
  id          String   @id @default(uuid())
  ticketId    String
  filename    String
  contentType String
  data        Bytes
  created_at  DateTime @default(now())
  ticket      Ticket   @relation(fields: [ticketId], references: [id])

  @@map("attachments")
}


enum Role {
  ADMIN
  ADMIN_BAG
  MEMBER
  WALLET
  GRAPHIC
  MASTER
  OPERATOR
  USER
  MANAGER
}

enum TypeRolePlans {
  MEMBERPJ
  MEMBERPF
  WALLET
  GRAPHIC
}

enum Type {
  NATURAL
  LEGAL
  INDIVIDUAL
  COMPANIE
  OPERATOR
  ADM
}

enum ChargeType {
  BANKSLIP
  BANKSLIP_PIX
}

enum TypeSlip {
  CHARGE
  DEPOSIT
}

enum LimitDate {
  D30
  D60
  D90
}

enum TaxKind {
  FINE
  INTEREST
  DISCOUNT
}

enum TaxType {
  PERCENTUAL
  FIXED_AMOUNT
  UNTIL_DATE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELED
}

enum InvoiceStatus {
  OPEN
  CLOSE
  DUE
  PAID
}

enum CardType {
  VIRTUAL
  PHYSICAL
}

enum TicketStatus {
  WAITING
  OPEN
  CLOSE
}
